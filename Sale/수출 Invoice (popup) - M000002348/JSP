<%@page import="java.util.*"%>
<%@page import="java.sql.*"%>
<%@page import="java.net.*"%>
<%@page import="java.io.*"%>
<%@page import="java.time.LocalDate"%>
<%@page import="java.time.format.DateTimeFormatter"%>
<%@page import="com.google.gson.Gson"%>
<%@page import="java.sql.DriverManager"%>
<%@page import="java.sql.SQLException"%>
<%@page import="org.json.JSONArray"%>
<%@page import="org.json.JSONObject"%>
<%@page import="org.slf4j.Logger"%>
<%@page import="org.slf4j.LoggerFactory"%>

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/WEB-INF/views/ajax/M000000173.jsp" %>
<%
    Logger logger = LoggerFactory.getLogger(getClass());

    String header = (String)request.getParameter("header");
    String detail = (String)request.getParameter("detail");
    String sdetail = (String)request.getParameter("sdetail");
    String type = (String)request.getParameter("type");

    String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    String url = "jdbc:sqlserver://192.168.2.205:1433;DatabaseName=simbiz";
    
    String sLine = "";
    String sText = "";
    String user = "sa";
    String password = "tlaqlwm2174";

    JSONObject jsonObj = new JSONObject();
    String PassText = null;
    String sql = "";
    String sqlCoumns = "";
    String sqlValues = "";
    String sqlDuplis = "";
    java.sql.Connection conn = null;
    java.sql.PreparedStatement pstmt = null;
    ResultSet rs = null;
    Statement stmt = null;

    //get now
    LocalDate today = LocalDate.now();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMM");
    String formattedDateNow = today.format(formatter);
    
    try {
        try {
            Class.forName(driver);
            conn = DriverManager.getConnection(url, user, password);
            conn.setAutoCommit(false);

            if ( type.equals("insert") || type.equals("edit") ) {
                Gson gson = new Gson();
                String invoice_export_cd = "";
                String comp_cd = "in";
                String factory_cd = "in0001";
                String wh_cd = "";
                String dateInput = "";
                String project_cd = "";
                if(header != null){
                    List<Map> list = gson.fromJson(header, List.class);
                    boolean isInsert = true;
                    for(int i = 0 ; i < list.size() ; i ++){
                        if (i>0) break;
                        dateInput = list.get(i).get("invoice_export_date").toString();
                        
                        Map<String, String> row = getRow(conn, "simbiz", "dbo", "tb_sl_invoice_export", list.get(i));
                        isInsert = row.get("invoice_export_cd").equals("NULL");
                        
                        if(row.get("invoice_export_cd").equals("NULL")){
                            row.put("invoice_export_cd", "'" + generateCode(conn, "CC002075") + "'");
                            row.put("status" ,"'new'");
                        }
                        
                        project_cd = list.get(i).get("project_cd").toString();

                        Iterator<String> keys = row.keySet().iterator();
                        while(keys.hasNext()){
                            String key = keys.next();
                            if ( row.get(key) != null) {                        
                                String value = row.get(key);
                                if (!sqlCoumns.equals("")) { sqlCoumns += ", "; }
                                sqlCoumns += key;
                                if (!sqlValues.equals("")) { sqlValues += ", "; }
                                sqlValues += value;
                                // 기본키 제외 duplicate sql 만들기
                                if (!key.equals("comp_cd") && !key.equals("factory_cd") && !key.equals("invoice_export_cd") && !key.equals("createuser") && !key.equals("createdate")) {
                                    if (!sqlDuplis.equals("")) { sqlDuplis += ", "; }
                                    sqlDuplis += (key + "=" + value);
                                }
                            }
                        }
                        
                        invoice_export_cd = row.get("invoice_export_cd");
                        comp_cd = row.get("comp_cd");
                        factory_cd = row.get("factory_cd");
                        wh_cd = row.get("wh_cd");
                        
                        if (isInsert){
                            sql =  " insert into tb_sl_invoice_export (" + sqlCoumns + ") VALUES (" + sqlValues + ")";
                            logger.info("insert into tb_sl_invoice_export");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                        }else{
                            sql = " update tb_sl_invoice_export set " + sqlDuplis + " where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and invoice_export_cd = " + row.get("invoice_export_cd") + " ";
                            logger.info("update tb_sl_invoice_export");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory("update", sql);
                        }
                        
                    }
                }
                
                String reqList[] = new String[0];
                if (!invoice_export_cd.equals("") && detail != null) {
                    List<Map> list = gson.fromJson(detail, List.class);
                    reqList = new String[list.size()];
                    
                    int prev_sale_qty = 0;
                    double delivery_progress_qty = 0.0;
                    int delivery_qty = 0;
                    boolean is_connect_delivery = false;
                    String delivery_progress_status = "";

                    for(int i = 0 ; i < list.size() ; i ++){
                        //clear sql statement
                        sqlCoumns = "";
                        sqlValues = "";
                        sqlDuplis = "";
                        
                        Map<String, String> row = getRow(conn, "simbiz", "dbo", "tb_sl_invoice_export_detail", list.get(i));
                        
                        if(row.get("invoice_export_seq").equals("NULL")){
                            row.put("invoice_export_cd", invoice_export_cd);
                            sql = "  select isnull(max(invoice_export_seq), 0) + 1 as invoice_export_seq from tb_sl_invoice_export_detail where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and invoice_export_cd = " + invoice_export_cd + "  ";
                            row.put("invoice_export_seq", getSOrder(conn, sql));
                            Iterator<String> keys = row.keySet().iterator();
                            while(keys.hasNext()){
                                String key = keys.next();
                                if ( row.get(key) != null) {                        
                                    String value = row.get(key);
                                    if (!sqlCoumns.equals("")) { sqlCoumns += ", "; }
                                    sqlCoumns += key;
                                    if (!sqlValues.equals("")) { sqlValues += ", "; }
                                    if (key.equals("progress_status")) {
                                        sqlValues += "'created'";
                                    } else if (key.equals("project_cd")){
                                        sqlValues += "'" + project_cd + "'";
                                    } else {
                                        sqlValues += value;
                                    }
                                }
                            }
                            
                            sql =  " insert into tb_sl_invoice_export_detail (" + sqlCoumns + ") VALUES (" + sqlValues + ")";
                            logger.info("insert into tb_sl_invoice_export_detail");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                            
                            /*handle stock*/
                            /*get item price last version */
                            sql = "select price from tb_ma_item_price where item_cd = " + row.get("item_cd") + " and last_version = 'Y' and price_cd = 'purchase'";
                            String lastPrice = selectQuery(conn, sql);
                            lastPrice = lastPrice == null ? "0" : lastPrice;
                            
                            String returnValueHandleWH[] = new String[2];
                            
                            returnValueHandleWH = call_ACT_STMUseQty(conn, "I1", "IVOUT", list.get(i).get("comp_cd").toString(), list.get(i).get("factory_cd").toString(),
                            list.get(i).get("item_cd").toString(), wh_cd.replace("'", ""), -Double.parseDouble(row.get("qty")), formatDateInput(dateInput), invoice_export_cd.replace("'", ""),
                            Integer.parseInt(row.get("invoice_export_seq")), "0");
                            if (!returnValueHandleWH[0].equals("OK")) {
                            throw new Exception(handleErrorCode(returnValueHandleWH[1]));
                        }
                            
                            
                        } else {
                        
                        
                            //check connect delivery
                            is_connect_delivery = false;
                            prev_sale_qty = 0;
                            
                            if (!row.get("order_cd").equals("NULL") && !row.get("order_seq").equals("NULL")) {
                                sql = " select order_cd, order_seq from tb_sl_order_detail where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and order_cd = " + row.get("order_cd") + " and order_seq = " + row.get("order_seq") + " ";
                                stmt = conn.createStatement();
                                rs = stmt.executeQuery(sql);
                                while (rs.next()) {
                                    is_connect_delivery = true;
                                }
                                //get sale qty before update
                                if (is_connect_delivery) {
                                    sql = " select isnull(qty, 0) as qty from tb_sl_invoice_export_detail where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and invoice_export_cd = " + row.get("invoice_export_cd") + " and invoice_export_seq = " + row.get("invoice_export_seq") + " ";
                                    prev_sale_qty = Integer.parseInt(selectQuery(conn, sql));
                                }
                            }

                        
                            Iterator<String> keys = row.keySet().iterator();
                            while(keys.hasNext()){
                                String key = keys.next();
                                if ( row.get(key) != null) {
                                    // 기본키 제외 duplicate sql 만들기
                                    String value = row.get(key);
                                    if (!key.equals("comp_cd") && !key.equals("factory_cd") && !key.equals("invoice_export_cd") && !key.equals("invoice_export_seq") && !key.equals("createuser") && !key.equals("createdate")) {
                                        if (!sqlDuplis.equals("")) { sqlDuplis += ", "; }
                                        sqlDuplis += (key + "=" + value);
                                    }
                                }
                            }
                            sql = " update tb_sl_invoice_export_detail set " + sqlDuplis + " where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and invoice_export_cd = " + row.get("invoice_export_cd") + " and invoice_export_seq = " + row.get("invoice_export_seq");
                            logger.info("update tb_sl_invoice_export_detail");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory("update", sql);
                        }
                        
                        reqList[i] = row.get("invoice_export_seq");
                        
                        //update progress request detail
                        if (!row.get("order_cd").equals("NULL") && !row.get("order_seq").equals("NULL")) {
                            sql = " select isnull(progress_qty, 0) as progress_qty from tb_sl_order_detail where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and order_cd = " + row.get("order_cd") + " and order_seq = " + row.get("order_seq") + " ";
                            delivery_progress_qty = (Integer.parseInt(selectQuery(conn, sql)) - prev_sale_qty) + Double.parseDouble(row.get("qty"));
                            
                            sql = " select isnull(order_qty, 0) as qty from tb_sl_order_detail where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and order_cd = " + row.get("order_cd") + " and order_seq = " + row.get("order_seq") + " ";
                            delivery_qty = Integer.parseInt(selectQuery(conn, sql));
                            
                            delivery_progress_status = delivery_progress_qty >= delivery_qty ? "completed" : "delivery_complete";
                            sql = " update tb_sl_order_detail set progress_status = '" + delivery_progress_status + "', progress_qty = " + delivery_progress_qty + " where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and order_cd = " + row.get("order_cd") + " and order_seq = " + row.get("order_seq") + " ";
                            logger.info("update tb_sl_order_detail");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory("update", sql);
                        
                    }
                }
                
                //delete req detail
                String sql1 = " select comp_cd, factory_cd ,invoice_export_cd, invoice_export_seq, order_cd, order_seq, qty from tb_sl_invoice_export_detail where order_cd is not null and order_seq is not null and comp_cd = " + comp_cd + " and factory_cd = " + factory_cd + " and invoice_export_cd= " + invoice_export_cd;
                List<Map<String, Object>> list1 = new ArrayList<>();
                List<Map<String, Object>> list2 = new ArrayList<>();
                
                
                sql = " delete from tb_sl_invoice_export_detail where comp_cd = " + comp_cd + " and factory_cd = " + factory_cd + " and invoice_export_cd = " + invoice_export_cd;	
                if (reqList.length > 0) {
                    sql += " and invoice_export_seq not in ( ";
                    sql1 += " and invoice_export_seq not in ( ";
                    for(int iDetailDelete = 0; iDetailDelete < reqList.length; iDetailDelete++)
                    {
                        if (iDetailDelete == reqList.length - 1) {
                            sql += "" + reqList[iDetailDelete] + ")";
                            sql1 += "" + reqList[iDetailDelete] + ")";
                        } else {
                            sql += "" + reqList[iDetailDelete] + ", ";
                            sql1 += "" + reqList[iDetailDelete] + ", ";
                        }
                    }
                }
                
                list1 = selectAllQuery(conn, sql1);
                for(int i1 = 0 ; i1 < list1.size() ; i1 ++){
                    sql1 = " select invoice_export_cd, invoice_export_seq from tb_sl_invoice_export_detail where order_cd = '" + list1.get(i1).get("order_cd") + "' and order_seq = " + list1.get(i1).get("order_seq") + " and invoice_export_seq != " + list1.get(i1).get("invoice_export_seq") + " and invoice_export_cd != '" + list1.get(i1).get("invoice_export_cd") + "' and comp_cd = '" + list1.get(i1).get("comp_cd")  + "' and factory_cd = '" + list1.get(i1).get("factory_cd")  + "' ";
                    list2 = selectAllQuery(conn, sql1);
                    
                    sql1 = " update tb_sl_order_detail set progress_qty = progress_qty - " + list1.get(i1).get("qty") + " , progress_status = '" + (list2.size() > 0 ? "delivery_complete" : "created") + "' where order_cd = '" + list1.get(i1).get("order_cd") + "' and order_seq = " + list1.get(i1).get("order_seq") + " and comp_cd = " + comp_cd + " and factory_cd = " + factory_cd + " ";
                    logger.info("update into tb_sl_order_detail");
                    logger.info(sql1);
                    pstmt = conn.prepareStatement(sql1);
                    pstmt.executeUpdate();
                }
                
                logger.info("delete into tb_sl_invoice_export_detail");
                logger.info(sql);
                pstmt = conn.prepareStatement(sql);
                pstmt.executeUpdate();
                
                
                PassText = "저장 되었습니다.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            }
        }
            if (type.equals("delete") ) {
                Gson gson = new Gson();
                String wh_cd = "";
                String dateInput = "";
                if(header != null){
                    List<Map> list = gson.fromJson(header, List.class);
                    for(int i = 0 ; i < list.size() ; i ++){
                    dateInput = list.get(i).get("invoice_export_date").toString();
                        if (i>0) break;
                        Map<String, String> row = getRow(conn, "simbiz", "dbo", "tb_sl_invoice_export", list.get(i));
                        wh_cd = list.get(i).get("wh_cd").toString();
                        if (!row.get("invoice_export_cd").equals("NULL")){
                        
                            //delete req
                            sql =  " update tb_sl_invoice_export set use_yn = 'N' where invoice_export_cd = " + row.get("invoice_export_cd") + " and comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd");
                            
                            logger.info("delete into tb_sl_invoice_export");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                            
                             //delete  detail
                            sql = " select comp_cd, factory_cd, invoice_export_cd, invoice_export_seq, order_cd, order_seq, qty from tb_sl_invoice_export_detail where comp_cd = " + row.get("comp_cd") + " and factory_cd = " + row.get("factory_cd") + " and invoice_export_cd = " + row.get("invoice_export_cd");
                            List<Map<String, Object>> list1 = new ArrayList<>();
                            
                            List<Map<String, Object>> list2 = new ArrayList<>();
                            
                            list1 = selectAllQuery(conn, sql);
                            for(int i1 = 0 ; i1 < list1.size() ; i1 ++){
                            
                                sql =  " delete from tb_sl_invoice_export_detail where invoice_export_cd = '" + list1.get(i1).get("invoice_export_cd") + "' and invoice_export_seq = " + list1.get(i1).get("invoice_export_seq") + " and comp_cd = '" + list1.get(i1).get("comp_cd")  + "' and factory_cd = '" + list1.get(i1).get("factory_cd")  + "' ";
                                logger.info("delete into tb_sl_invoice_export_detail");
                                logger.info(sql);
                                pstmt = conn.prepareStatement(sql);
                                pstmt.executeUpdate();
                                addHistory(sql);
                            
                                //update order
                                if (list1.get(i1).get("order_cd") != null && list1.get(i1).get("order_seq") != null) {
                                    sql = " select order_cd, order_seq from tb_sl_invoice_export_detail where order_cd = '" + list1.get(i1).get("order_cd") + "' and order_seq = " + list1.get(i1).get("order_seq") + " and comp_cd = '" + list1.get(i1).get("comp_cd")  + "' and factory_cd = '" + list1.get(i1).get("factory_cd")  + "' ";
                                    list2 = selectAllQuery(conn, sql);
                                    
                                    sql = " update tb_sl_order_detail set progress_qty = progress_qty - " + list1.get(i1).get("qty") + " , progress_status ='" + (list2.size() > 0 ? "delivery_complete" : "created") + "' where order_cd = '" + list1.get(i1).get("order_cd") + "' and order_seq = " + list1.get(i1).get("order_seq") + " and comp_cd = '" + list1.get(i1).get("comp_cd")  + "' and factory_cd = '" + list1.get(i1).get("factory_cd")  + "' ";
                                    logger.info("update into tb_sl_order_detail");
                                    logger.info(sql);
                                    pstmt = conn.prepareStatement(sql);
                                    pstmt.executeUpdate();
                                }
                            }
                        }
                    }
                }
                
                if(detail != null){
                    List<Map> list = gson.fromJson(detail, List.class);
                    for(int i = 0 ; i < list.size() ; i ++){
                        Map<String, String> row = getRow(conn, "simbiz", "dbo", "tb_sl_invoice_export_detail", list.get(i));
                        
                        sql = "select price from tb_ma_item_price where item_cd = " + row.get("item_cd") + " and last_version = 'Y' and price_cd = 'purchase'";
                        String lastPrice = selectQuery(conn, sql);
                        lastPrice = lastPrice == null ? "0" : lastPrice;
                        
                        String returnValueHandleWH[] = new String[2];
                    
                        returnValueHandleWH = call_ACT_STMUseQty(conn, "D1", "IVOUT", list.get(i).get("comp_cd").toString(), list.get(i).get("factory_cd").toString(),
                        list.get(i).get("item_cd").toString(), wh_cd.replace("'", ""), -Double.parseDouble(row.get("qty")), formatDateInput(dateInput), list.get(i).get("invoice_export_cd").toString(),
                        (int)Double.parseDouble(row.get("invoice_export_seq")), "0");
                        if (!returnValueHandleWH[0].equals("OK")) {
                            throw new Exception(handleErrorCode(returnValueHandleWH[1]));
                        }
                    }
                    
                }

                PassText = "Deleted.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            }
            if ( type.equals("cust_btn1") ) {}
            if ( type.equals("cust_btn2") ) {}
            if ( type.equals("cust_btn3") ) {}
            if ( type.equals("cust_btn4") ) {}
            if ( type.equals("cust_btn5") ) {}
        } catch (Throwable throwable) {
            if (conn != null) {
                conn.rollback();
                logger.info("!!!!ROLLBACK DONE!!!!");
            }
            throw throwable;
        } finally {
            if (conn != null) conn.close();
            if (pstmt != null) pstmt.close();
        }
    } catch (Exception e) {
        out.write("error : " + e.getMessage() + "\n" + sql);
        if (conn != null) conn.close();
        if (pstmt != null) pstmt.close();
    }
%>

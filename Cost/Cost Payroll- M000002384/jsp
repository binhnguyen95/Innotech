<%@page import="java.util.*"%>
<%@page import="java.sql.*"%>
<%@page import="java.net.*"%>
<%@page import="java.io.*"%>
<%@page import="java.time.LocalDate"%>
<%@page import="java.time.format.DateTimeFormatter"%>
<%@page import="com.google.gson.Gson"%>
<%@page import="java.sql.DriverManager"%>
<%@page import="java.sql.SQLException"%>
<%@page import="org.json.JSONArray"%>
<%@page import="org.json.JSONObject"%>
<%@page import="org.slf4j.Logger"%>
<%@page import="org.slf4j.LoggerFactory"%>

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/WEB-INF/views/ajax/M000000173.jsp" %>
<%
    Logger logger = LoggerFactory.getLogger(getClass());

    String header = (String)request.getParameter("header");
    String detail = (String)request.getParameter("detail");
    String sdetail = (String)request.getParameter("sdetail");
    String type = (String)request.getParameter("type");
    String UID = (String)request.getParameter("UID");

    String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    String url = "jdbc:sqlserver://192.168.2.205:1433;DatabaseName=simbiz";
    
    String sLine = "";
    String sText = "";
    String user = "sa";
    String password = "tlaqlwm2174";

    JSONObject jsonObj = new JSONObject();
    String PassText = null;
    String sql = "";
    String sqlCoumns = "";
    String sqlValues = "";
    String sqlDuplis = "";
    java.sql.Connection conn = null;
    java.sql.PreparedStatement pstmt = null;
    ResultSet rs = null;
    Statement stmt = null;
    
    //get now
    LocalDate today = LocalDate.now();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMM");
    String formattedDateNow = today.format(formatter);
    
    String cost_unit = "";
    
    try {
        try {
            Class.forName(driver);
            conn = DriverManager.getConnection(url, user, password);
            conn.setAutoCommit(false);

            if ( type.equals("insert") || type.equals("edit") ) { 
                Gson gson = new Gson();
                String cost_ym = "";
                String cost_seq = "";
                
                boolean isInsert = true;
                if(header != null){
                    List<Map> list = gson.fromJson(header, List.class);
                    for(int i = 0 ; i < list.size() ; i ++){
                        sqlCoumns = "";
                        sqlValues = "";
                        sqlDuplis = "";
                        Map<String, String> row = getRow(conn, "simbiz", "dbo", "tb_cost_payroll", list.get(i));
                              
                        cost_ym = row.get("cost_ym").replace("-", "").substring(1, 7);

                        isInsert = row.get("cost_seq").equals("NULL");
                        if(row.get("cost_seq").equals("NULL")){
                            sql = " select isnull(max(cost_seq), 0) + 1 as cost_seq from tb_cost_payroll where cost_ym = " + cost_ym;
                            row.put("cost_seq", getSOrder(conn, sql));
                        }
                        cost_unit = "1000";
                        
                        Iterator<String> keys = row.keySet().iterator();
                        while(keys.hasNext()){
                            String key = keys.next();
                            if ( row.get(key) != null) {                        
                                String value = row.get(key);

                                if (!sqlCoumns.equals("")) { sqlCoumns += ", "; }
                                
                                sqlCoumns += key;
                                
                                if (!sqlValues.equals("")) { sqlValues += ", "; }
                                
                                if (key.equals("cost_ym")) { 
                                    sqlValues +=  "'"  + cost_ym + "'";
                                } else if (key.equals("cost_unit")) { 
                                    sqlValues +=  "'"  + cost_unit + "'"; 
                                } else{
                                    sqlValues += value;
                                }
                                
                                // 기본키 제외 duplicate sql 만들기
                                if (!key.equals("cost_unit") && !key.equals("cost_ym") && !key.equals("cost_seq") && !key.equals("createuser") && !key.equals("createdate")) {
                                    if (!sqlDuplis.equals("")) { sqlDuplis += ", "; }
                                    sqlDuplis += (key + "=" + value);
                                }
                            }
                        }
                        
                        cost_unit =row.get("cost_unit");
                        cost_seq = row.get("cost_seq");

                        if (isInsert){
                            sql =  " insert into tb_cost_payroll (" + sqlCoumns + ") VALUES (" + sqlValues + ")";
                            logger.info("insert into tb_cost_payroll");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                        }else{
                            sql = " update tb_cost_payroll set " + sqlDuplis + " where cost_unit = " + row.get("cost_unit") + " and cost_ym = " + cost_ym + " and cost_seq = " + row.get("cost_seq") + " ";
                            
                            /*out.write("error : " + sql);
                            if (conn != null) conn.close();
                            if (pstmt != null) pstmt.close();*/
                            
                            logger.info("update tb_cost_payroll");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory("update", sql);
                        }
                        
                    }
                }

                PassText = "저장 되었습니다.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            }

            if ( type.equals("delete") ) {
                Gson gson = new Gson();
                String cost_ym = "";
                if(header != null){
                    List<Map> list = gson.fromJson(header, List.class);
                    for(int i = 0 ; i < list.size() ; i ++){
                        Map<String, String> row = getRow(conn, "simbiz", "dbo", "tb_cost_payroll", list.get(i));
                        
                        cost_ym = row.get("cost_ym").replace("-", "");
                        
                        if (!row.get("cost_seq").equals("NULL")){
                            //delete req
                            sql =  " delete from tb_cost_payroll where cost_unit = " + row.get("cost_unit") + " and cost_ym = " + cost_ym + " and cost_seq = " + row.get("cost_seq");
                            logger.info("update into tb_cost_payroll");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                            
                        }
                    }
                }
                PassText = "삭제되었습니다.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            }
            if ( type.equals("cust_btn1") ) {}
            if ( type.equals("cust_btn2") ) {}
            if ( type.equals("cust_btn3") ) {}
            if ( type.equals("cust_btn4") ) {}
            if ( type.equals("cust_btn5") ) {}
            
            if (type.equals("excel")) {
                List<Map> list;
                int i;
                Map<String, String> row;
                String cnt;
                Iterator<String> keys;
                
                Gson gson = new Gson();
                
                java.text.SimpleDateFormat dateFormat = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss");
                java.util.Date time = new java.util.Date();
                String datetime = dateFormat.format(time);
                
                int CNT = 0;
                
                String in_cd = "";
                boolean isInsert = true;
                String cost_ym = "";

                if(header != null){
                
                    list = gson.fromJson(header, List.class);
                   
                    for(i = 0 ; i < list.size() ; i ++){
                        row = getRow(conn, "simbiz", "dbo", "tb_cost_payroll", list.get(i));
                        
                        sqlDuplis = "";
                        cost_unit = "1000";
                        
                        if(isInsert){
                            isInsert = row.get("cost_seq").equals("NULL");
                            if(row.get("cost_seq").equals("NULL")){
                                sql = " select isnull(max(cost_seq), 0) + 1 as cost_seq from tb_cost_payroll where cost_ym = " + formattedDateNow;
                                row.put("cost_seq", getSOrder(conn, sql));
                            }
                            row.put("cost_unit", "'" + cost_unit + "'");
                            row.put("createuser", "'" + UID + "'");
                            row.put("createdate", "'" + datetime + "'");
                            row.put("updateuser", "'" + UID + "'");
                            row.put("updatedate", "'" + datetime + "'");
                        }
                        else {
                            row.put("updateuser", "'" + UID + "'");
                            row.put("updatedate", "'" + datetime + "'");
                        }
                        
                        sqlCoumns = "";
                        sqlValues = "";
                        sqlDuplis = "";
                        
                        keys = row.keySet().iterator();
                        while(keys.hasNext()){
                            String key = keys.next();
                            
                            if ( row.get(key) != null) {
                                String value = row.get(key);
                                if (!sqlCoumns.equals("")) { sqlCoumns += ", "; }
                                sqlCoumns += key;
                                
                                if (!sqlValues.equals("")) { sqlValues += ", "; }
                                
                                if (key.equals("cost_ym")) { 
                                    sqlValues +=  "'"  + formattedDateNow + "'"; 
                                    
                                }else {
                                    sqlValues += value; 
                                }
                                
                                // 기본키 제외 duplicate sql 만들기
                                if (!key.equals("cost_unit") && !key.equals("cost_ym") && !key.equals("cost_seq") && !key.equals("createuser") && !key.equals("createdate")) {
                                    if (!sqlDuplis.equals("")) { sqlDuplis += ", "; }
                                    sqlDuplis += (key + "=" + value);
                                }
                                
                            }
                            
                        }
                        
                        if(isInsert) {
                            sql =  " insert into tb_cost_payroll (" + sqlCoumns + ") VALUES (" + sqlValues + ") ";
                            logger.info("insert into tb_cost_payroll");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                        }
                        else {
                            sql = " update tb_cost_payroll set " + sqlDuplis + " where cost_unit = " + row.get("cost_unit") + " and cost_ym = " + row.get("cost_ym") + " and cost_seq = " + row.get("cost_seq") + " ";
                            logger.info("update into tb_cost_payroll");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                        }
                        
                    }
                }

                jsonObj.put("result", "Y");
                jsonObj.put("CNT", CNT);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            
            }

        } catch (Throwable throwable) {
            if (conn != null) {
                conn.rollback();
                logger.info("!!!!ROLLBACK DONE!!!!");
            }
            throw throwable;
        } finally {
            if (conn != null) conn.close();
            if (pstmt != null) pstmt.close();
        }
    } catch (Exception e) {
        out.write("error : " + e.getMessage() + "\n" + sql);
        if (conn != null) conn.close();
        if (pstmt != null) pstmt.close();
    }
%>
